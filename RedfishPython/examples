#Boot to network ISO
  python BootToNetworkIsoOsdREDFISH.py -ip 10.7.2.23 -u root -p passwd -ay     #check if mounted
  python BootToNetworkIsoOsdREDFISH.py -ip 10.7.2.23 -u root -p passwd -by --ipaddress 192.168.1.11 --sharetype NFS --sharename /export --imagename CentOS-7.iso
   # this will mount the ISO via NFS or CIFS
   # then reboot the server, booting from that ISO
  python BootToNetworkIsoOsdREDFISH.py -ip 10.7.2.23 -u root -p passwd -dy   #detach the ISO
#
#---------------
# create a file, ipfile, with list of iDRAC ip addresses and run the 'main' program to loop through that ipfile while calling the other scripts....
# there is a main.sh BASH script that uses parallel and sshpass, and a main.py script using python...
#----------------
#export template and change it if needed
#       ./main.py -p 'ExportSystemConfigurationLocalREDFISH.py -t ALL'
#list available bios settings, create a file called biosfile with your bios settings: 
        ./main.py -p 'GetSetBiosAttributesREDFISH_ja.py -a y'
#------------------------------------------------------------------------------#
#delete all jobs in queue: 
#	./main.sh 'DeleteJobIdREDFISH.py -c y'
#get job queue: 
#	./main.sh 'DeleteJobIdREDFISH.py -q y'
#reset idrac
#	./main.sh 'ResetIdracREDFISH.py'
#query idrac (get powerstate) to see if up, then continue... ./main.sh 'SetPowerStateREDFISH.py -g y'
#-----------------------------------------------------------------------
#import template#
	#./main.py -p 'ImportSystemConfigurationLocalFilenameREDFISH.py -t ALL -s NoReboot -f /export/file.xml'
#	#nfs#./main.sh -p 'ImportSystemConfigurationNetworkShareREDFISH.py -t ALL --ipaddress 10.40.196.211 --sharetype NFS --sharename /export/nfs --filename file.xml'
#	#cifs#Import just iDRAC settings..../main.sh -p 'ImportSystemConfigurationNetworkShareREDFISH.py -t IDRAC --ipaddress 192.168.0.140 --sharetype CIFS --sharename /export/cifs --filename file.xml --username Dell --password password'
# OR #
#change BIOS settings with biosfile - edit the file called, biosfile, first....then run this: 
#	./main.py -p 'BiosSetAttributeREDFISH_noreboot.withfile.py'
#-----------------------------------------------------------------------
#Then reboot when ready to apply settings:
#	./main.py -p 'SetPowerStateREDFISH.py -r ForceRestart'
#------------
#list jobqueue:
	./main.py -p 'GetDeleteJobQueueREDFISH.py -g y'
#------------
#------------
#------------
#------------
#------------
#./main.sh 'BiosSetAttributeREDFISH_noreboot.py -an Proc1TurboCoreNum,Proc2TurboCoreNum -av 1,2'
#./main.sh 'BiosSetAttributeREDFISH_noreboot.py -an Proc1TurboCoreNum,Proc2TurboCoreNum -av All,All'
#./main.sh 'BiosSetAttributeREDFISH_noreboot.py -an OneTimeBootMode -av Enabled All,All'
#------------------------------
#get powerstate
#./main.sh 'SetPowerStateREDFISH.py -g y'
#reboot
#./main.sh 'SetPowerStateREDFISH.py -r GracefulRestart'
#turn off and on
#./main.sh 'SetPowerStateREDFISH.py -r ForceOff'
#./main.sh 'SetPowerStateREDFISH.py -r On'
##

#------------------------------
###UPDATE FIRMWARE
# list firmware
#withrepo - show current levels#./main.sh 'InstallFromRepositoryREDFISH.py -g y'
#withrepo - show in xml format #./main.sh 'InstallFromRepositoryREDFISH.py -r y'
#withrepo - install updates#./main.sh 'InstallFromRepositoryREDFISH.py -i y'
##
##single#./main.sh 'DeviceFirmwareDellUpdateServiceREDFISH.py -g y'
#./main.sh 'GetFirmwareInventoryREDFISH.py'
#
# repo get list -ry # ./main.sh 'InstallFromRepositoryREDFISH.py -i y -r y --ipaddress  172.19.144.245 --sharename /export/repo/14G --applyupdate False --sharetype NFS --catalogfile Catalog.xml'
# repo apply # ./main.sh 'InstallFromRepositoryREDFISH.py -i y --ipaddress  172.19.144.245 --sharename /export/repo/14G --applyupdate False --sharetype NFS --catalogfile Catalog.xml'
#
#HTTPS
# repo apply  # ./main.py -p 'InstallFromRepositoryREDFISH.py -r y --ipaddress 10.135.87.36 --sharename /repo/fc640 --applyupdate False --sharetype HTTP --catalogfile Catalog.xml'
# repo apply  # ./main.py -p 'InstallFromRepositoryREDFISH.py -i y --ipaddress 172.19.144.245 --sharename /repo/r640r740 --applyupdate False --sharetype HTTPS --ignorecertwarning On --catalogfile Catalog.xml'
#
#single# ./main.sh 'DeviceFirmwareDellUpdateServiceREDFISH.py -l /export -f idrac_2.63.60.61.exe -i NextReboot'
#------------------------------
#
#
#
## get system info
#./main.py -p 'GetSystemHWInventoryREDFISH_ja.py -a y'
# get MAC addresses: egrep 'Network port detail|NetworkAddress' 10*y.txt

#./main.py -p 'GetSystemHWInventoryREDFISH_ja.py -a y'
#./main.py -p 'GetSystemHWInventoryREDFISH_ja.py -c y'
#./main.py -p 'GetSystemHWInventoryREDFISH_ja.py -ps y'
#./main.py -p 'GetSystemHWInventoryREDFISH_ja.py -n y'
##
#./main.sh 'GetStorageInventoryREDFISH.py -c y'
#./main.sh 'GetStorageInventoryREDFISH.py -c yy'
##
#SCP
#export#./main.py -p 'ExportSystemConfigurationLocalREDFISH.py -t ALL'
#import#./main.sh 'ImportSystemConfigurationLocalFilenameREDFISH.py -t ALL -s NoReboot -f /export/file.json'
#import from share#nfs#./main.sh 'ImportSystemConfigurationNetworkShareREDFISH.py -t ALL --ipaddress 10.40.196.211 --sharetype NFS --sharename /export/nfs --filename ile.json'
##import from share#cifs#./main.sh 'ImportSystemConfigurationNetworkShareREDFISH.py -t BIOS --ipaddress 192.168.0.140 --sharetype CIFS --sharename /export/cifs --filename file.json --username Dell --password password'
##
## RAID
#list controllers###./main.sh 'CreateVirtualDiskREDFISH.py -cy'
#list controllers with disks assigned###./main.sh 'CreateVirtualDiskREDFISH.py -cyy'
#list controllers###./main.sh 'CreateVirtualDiskREDFISH.py -dRAID.Integrated.1-1'
#Create RAID1 array on two disks###./main.sh 'CreateVirtualDiskREDFISH.py -C RAID.Integrated.1-1 -V y -D Disk.Bay.0:Enclosure.Internal.0-1:RAID.Integrated.1-1,Disk.Bay.1:Enclosure.Internal.0-1:RAID.Integrated.1-1 -R 1'
##

#./main.py -p 'SetNextOneTimeBootDeviceREDFISH.py -o Pxe -r y'
#
###############Virtual Media
InsertEjectVirtualMediaREDFISH.py -ip 192.168.0.120 -u root -p calvin -o 1 -d 1 -i http://192.168.0.130/esxi_5u1.iso #this example shows booting to CD ISO on HTTP share
SetNextOneTimeBootVirtualMediaDeviceOemREDFISH.py -ip 192.168.0.120 -u root -p passwd -d 1 -r y # this example will set next next ontime boot device to virtual cd and reboot now
###################################
# disable slots
#biosfile contains:
Slot1:Disabled
Slot2:BootDriverDisabled
#./main.py -p 'BiosGetAttributesREDFISH_ja.py' # to a file
#./main.py -p 'GetDeleteJobQueueREDFISH_nocheck.py -d JID_CLEARALL'
#./main.py -p 'ResetIdracREDFISH.py'
#./main.py -p 'BiosSetAttributeREDFISH_noreboot.withfile.py'
#./main.py -p 'GetDeleteJobQueueREDFISH.py -g y' #list jobqueue
#./main.py -p 'SetPowerStateREDFISH.py -r ForceRestart'
#./main.py -p 'BiosGetAttributesREDFISH_ja.py'
#------------------------------------------------------------------------
